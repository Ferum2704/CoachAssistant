@page "/login"

<MudPaper Elevation="25">
    <MudContainer>
        <EditForm Model="@user" OnValidSubmit="LoginUser">
            <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField @bind-Value="user.Username" Label="Username" Variant="Variant.Outlined" FullWidth />
                     <MudTextField @bind-Value="user.Password" Label="Password" Variant="Variant.Outlined" FullWidth InputType="InputType.Password" />
                     <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth Class="mt-2">Log in</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Secondary" FullWidth OnClick="@NavigateToRegister" Class="mt-2">Register</MudButton>
                 </MudItem>
             </MudGrid>
         </EditForm>
     </MudContainer>
 </MudPaper>

@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IHttpClientService HttpClientService
@inject ICurrentTeamProvider CurrentTeamProvider
@inject IAccountManager AccountManager
@inject SignalRService SignalRService

 @code {
    LoginModel user = new();

    async Task LoginUser(EditContext context)
    {
        var identityModel = await HttpClientService.PostAsync<LoginModel, IdentityModel>(ApiUrls.LoginUrl, user);

        await LocalStorage.SetItemAsync($"{nameof(identityModel.Tokens.AccessToken)}", identityModel.Tokens.AccessToken);
        await LocalStorage.SetItemAsync($"{nameof(identityModel.Tokens.RefreshToken)}", identityModel.Tokens.RefreshToken);
        await LocalStorage.SetItemAsync($"{nameof(identityModel.DomainUserId)}", identityModel.DomainUserId);

        await AuthStateProvider.GetAuthenticationStateAsync();

        await SignalRService.StartConnectionAsync();

        NavigationManager.NavigateTo("/", true);
    }

    void NavigateToRegister() => NavigationManager.NavigateTo("/register");
}
