@page "/training-details/{TrainingId}"
@inject ICurrentTeamProvider CurrentTeamProvider
@inject NavigationManager NavigationManager
@inject TrainingService TrainingService
@inject TrainingRecordService TrainingRecordService
@inject IDialogService DialogService
@inject TeamService TeamService

<MudPaper Class="pa-4">
    @if (training is not null)
    {
        <MudText Typo="Typo.h4" GutterBottom="true">@training.Name</MudText>
        <MudText>@training.StartDate.Value.ToString("g") - @training.StartDate.Value.AddHours(training.Duration).ToString("g")</MudText>
        <MudText GutterBottom="true">@training.Description</MudText>

        <MudText Typo="Typo.h5" Class="mt-4 mb-2">Записи гравців на тренуванні</MudText>
        <MudTable Items="@training.TrainingRecords" Dense>
             <HeaderContent>
                <MudTh Style="width: 50%;">Гравець</MudTh>
                <MudTh>Присутність</MudTh>
                <MudTh>Дії</MudTh>
             </HeaderContent>
            <RowTemplate>
             <MudTd>@($"{context.Player.Surname} {context.Player.Name}")</MudTd>
                <MudTd>
                    <MudIcon Icon="@((context.IsPresent ? Icons.Filled.Check : Icons.Filled.Close))"
                            Color="@(context.IsPresent ? Color.Success : Color.Error)"
                            Size="Size.Large" />
                </MudTd>
                <MudTd>
                    <MudButton OnClick="@(() => CheckPresence(context))" Color="Color.Primary">Позначити присутність</MudButton>
                    <MudButton OnClick="@(() => ViewDetails(context))" Color="Color.Secondary">Деталі</MudButton>
                    <MudButton OnClick="@(() => SendByEmail(context))" Color="Color.Success" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send">Відправити звіт гравцю</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    [Parameter]
    public string TrainingId { get; set; }

    private TrainingViewModel training;
    private TeamViewModel currentTeam;

    protected override async Task OnInitializedAsync()
    {
        await LoadTraining();
    }

    private async Task CheckPresence(TrainingRecordViewModel record)
    {
        await TrainingRecordService.Edit(record.Id, new TrainingRecordModel
        {
            IsPresent = !record.IsPresent,
        });

        record.IsPresent = !record.IsPresent;
    }

    private async Task ViewDetails(TrainingRecordViewModel record)
    {
        var parameters = new DialogParameters<PlayerTrainingDetails>();
        parameters.Add(x => x.Record, record);

        var dialog = DialogService.Show<PlayerTrainingDetails>(
            $"{record.Player.Name} {record.Player.Surname}",
            parameters,
            new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium });
        var result = (await dialog.Result).Data as TrainingRecordViewModel;

        if (result != null)
        {
            var updatedRecord = await TrainingRecordService.Edit(record.Id, new TrainingRecordModel
                {
                    Note = result.Note is null ? "" : result.Note,
                });
        }

        await LoadTraining();
    }

    private async Task LoadTraining()
    {
        if (CurrentTeamProvider.CurrentClub is null)
        {
            await TeamService.GetCoachTeam();
        }

        currentTeam = CurrentTeamProvider.CurrentClub.Team;
        training = await TrainingService.GetById(currentTeam.Id, new Guid(TrainingId));
        foreach (var record in training.TrainingRecords)
        {
            record.Player = currentTeam.Players.FirstOrDefault(p => p.Id == record.PlayerId);
        }
        training.TrainingRecords = training.TrainingRecords.OrderBy(x => x.Player.Surname).ToList();
    }

    private async Task SendByEmail(TrainingRecordViewModel record) => await TrainingRecordService.SendRecordByEmail(record.Id);
}
