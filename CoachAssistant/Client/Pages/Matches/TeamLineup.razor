@inject ICurrentTeamProvider CurrentTeamProvider
@inject PositionService PositionService

<MudGrid>
    @if (Team != null)
    {
        foreach (var lineupPosition in Team.LineupPositions)
        {
            <MudItem xs="12" sm="4" md="3">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@lineupPosition.Position.Name</MudText>
                            @if (lineupPosition.MatchLineupPositionPlayers.Any())
                        {
                            <MudList>
                                @foreach (var player in lineupPosition.MatchLineupPositionPlayers)
                                {
                                    <MudListItem>@player.Player.Name - @player.Score</MudListItem>
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudButton OnClick="@(() => AddPlayer(lineupPosition))">Add Players</MudButton>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    }
    <MudItem xs="12">
        <MudButton OnClick="@CalculateLineup">Calculate Lineup</MudButton>
    </MudItem>
</MudGrid>

@code {

    private MatchTeamViewModel team;

    [Parameter]
    public MatchTeamViewModel Team
    {
        get => team;
        set
        {
            team = value;
            LoadPlayersAndPositions();
        }
    }

    private void LoadPlayersAndPositions()
    {
        if (team is not null)
        {
            foreach (var lineupPosition in team.LineupPositions)
            {
                lineupPosition.Position = PositionService.Positions.First(x => x.Id == lineupPosition.PositionId);

                foreach (var positionPlayer in lineupPosition.MatchLineupPositionPlayers)
                {
                    positionPlayer.Player = CurrentTeamProvider.CurrentClub.Team.Players.First(x => x.Id == positionPlayer.PlayerId);
                }
            }
        }
    }

    private async Task CalculateLineup()
    {
        // Call a service to calculate the best players for each position
    }

    private void AddPlayer(MatchLineupPositionViewModel position)
    {
        // Navigate to player selection or add logic
    }
}
