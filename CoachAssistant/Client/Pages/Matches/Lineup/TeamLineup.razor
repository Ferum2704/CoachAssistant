@using System.Security.Claims
@inject ICurrentTeamProvider CurrentTeamProvider
@inject PositionService PositionService
@inject MatchTeamService MatchTeamService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountManager AccountManager
@inject IDialogService DialogService
@inject MatchLineupPositionPlayerService MatchLineupPositionPlayerService

<MudGrid Class="mt-3 pa-2" Style="background-color: #f4f4f4;">
    @if (Team != null)
    {
        <MudItem xs="12">
            @if (isTeamCoach)
            {
                <MudSelect T="string" Label="Select Formation" Value="@SelectedFormation" ValueChanged="OnFormationChangedAsync">
                    <MudSelectItem Value=@("4-4-2")>4-4-2</MudSelectItem>
                    <MudSelectItem Value=@("4-3-3")>4-3-3</MudSelectItem>
                </MudSelect>
            }
        </MudItem>
        foreach (var lineupPosition in Team.LineupPositions)
        {
            <MudItem xs="12" sm="6" md="4" Style="margin-bottom: 15px;">
                <MudCard Outlined="true" Elevation="1" Style="border: 1px solid #dee2e6;">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" Style="font-size: 1.25rem; font-weight: 500;">@lineupPosition.Position.Name</MudText>
                            @if (lineupPosition.MatchLineupPositionPlayers.Any())
                        {
                            <MudList>
                                @foreach (var player in lineupPosition.MatchLineupPositionPlayers)
                                {
                                    if (player.Player is not null)
                                    {
                                        <MudListItem Style="@((player == lineupPosition.MatchLineupPositionPlayers.First()) ? "font-weight: bold; background-color: #d1e7dd;" : "")">
                                            @player.Player.Name - @Math.Round(player.Score, 2)
                                        </MudListItem>
                                    }
                                }
                            </MudList>

                            @if (isTeamCoach)
                            {
                                <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="@(() => RemovePlayers(lineupPosition))">Remove Players</MudButton>
                            }
                        }
                        else if(isTeamCoach)
                        {
                            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Secondary" OnClick="@(() => AddPlayer(lineupPosition))">Add Player</MudButton>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    }
    @if (isTeamCoach)
    {
        <MudItem xs="12" Style="text-align: center; margin-top: 20px;">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CalculateLineup">Calculate Lineup</MudButton>
        </MudItem>
    }
</MudGrid>


@code {

    private MatchTeamViewModel team;
    private bool isTeamCoach;
    private bool isManager;

    [Parameter]
    public MatchTeamViewModel Team
    {
        get => team;
        set
        {
            team = value;
            LoadPlayersAndPositions();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Team is not null)
        {
            var user = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var isCoach = await AccountManager.IsUserInRole("Coach");

            if (isCoach)
            {
                isTeamCoach = Team.Team.CoachId == new Guid(user.User.FindFirst(ClaimTypes.NameIdentifier).Value);
            }
        }
    }

    private string selectedFormation;

    public string SelectedFormation
    {
        get => $"{Team?.NumberOfDefenders}-{Team?.NumberOfMidfielders}-{Team?.NumberOfForwards}";
        set => selectedFormation = value;
    }

    private async Task OnFormationChangedAsync(string newFormation)
    {
        if (newFormation != selectedFormation)
        {
            var parts = newFormation.Split('-').Select(int.Parse).ToArray();

            var matchTeam = await MatchTeamService.Edit(Team.Id, new MatchTeamModel()
            {
                NumberOfDefenders = parts[0],
                NumberOfMidfielders = parts[1],
                NumberOfForwards = parts[2]
            });

            Team.NumberOfDefenders = matchTeam.NumberOfDefenders;
            Team.NumberOfMidfielders = matchTeam.NumberOfMidfielders;
            Team.NumberOfForwards = matchTeam.NumberOfForwards;

            StateHasChanged();

            SelectedFormation = newFormation;
        }
    }

    private void LoadPlayersAndPositions()
    {
        if (team is not null)
        {
            foreach (var lineupPosition in team.LineupPositions)
            {
                lineupPosition.Position = PositionService.Positions.First(x => x.Id == lineupPosition.PositionId);
                lineupPosition.MatchLineupPositionPlayers = lineupPosition.MatchLineupPositionPlayers.OrderByDescending(p => p.Score).ToList();

                foreach (var positionPlayer in lineupPosition.MatchLineupPositionPlayers)
                {
                    positionPlayer.Player = Team?.Team?.Players?.First(x => x.Id == positionPlayer.PlayerId);
                }
            }
        }
    }

    private async Task CalculateLineup()
    {
        await MatchTeamService.CalculateLineup(Team.Id);
        Team = await MatchTeamService.GetById(Team.Id);
    }

    private async Task AddPlayer(MatchLineupPositionViewModel position)
    {
        var bestPlayersIds = new List<Guid>();

        foreach (var lineupPosition in Team.LineupPositions)
        {
            if (lineupPosition.MatchLineupPositionPlayers.Any())
            {
                bestPlayersIds.Add(lineupPosition.MatchLineupPositionPlayers.First().Player.Id);
            }
        }

        var availablePlayers = CurrentTeamProvider.CurrentClub.Team.Players.Where(x => !bestPlayersIds.Contains(x.Id)).ToList();

        var parameters = new DialogParameters<AddLineupPlayerDialog>();
        parameters.Add(x => x.AvailablePlayers, availablePlayers);

        var dialog = DialogService.Show<AddLineupPlayerDialog>(
            $"Add player to position {position.Position.Name}",
            parameters,
            new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });
        var result = (await dialog.Result).Data as PlayerViewModel;

        if (result is not null)
        {
            var positionPlayer = await MatchLineupPositionPlayerService.Add(new MatchLineupPositionPlayerModel
                {
                    MatchLineupPositionId = position.Id,
                    PlayerId = result.Id
                });
            positionPlayer.Player = Team.Team.Players?.First(x => x.Id == positionPlayer.PlayerId);

            position.MatchLineupPositionPlayers.Add(positionPlayer);
            StateHasChanged();
        }
    }

    private async Task RemovePlayers(MatchLineupPositionViewModel position)
    {
        await MatchLineupPositionPlayerService.RemoveByPositionId(position.Id);

        position.MatchLineupPositionPlayers.RemoveAll(x => x.MatchLineupPositionId == position.Id);
    }
}
