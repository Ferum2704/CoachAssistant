@inject TeamService TeamService
@inject TournamentTeamService TournamentTeamService
@inject NavigationManager NavigationManager
@inject IAccountManager AccountManager
@inject IDialogService DialogService

<MudPaper Elevation="1" Class="pa-4 my-2">
    @if (Tournament is not null)
    {
        <MudGrid Class="mb-2">
            <MudItem xs="9">
                <MudText Typo="Typo.h5">Команди в @Tournament.Name</MudText>
                </MudItem>
                <MudItem xs="3" Class="d-flex justify-end">
                    @if (isManager)
                {
                    <MudButton OnClick="@AddTeam" Color="Color.Primary" Variant="Variant.Filled">Додати команду</MudButton>
                }
            </MudItem>
        </MudGrid>
        <MudTable Items="@clubs" Striped="true">
            <HeaderContent>
                <MudTh>Назва</MudTh>
                <MudTh>Населений пункт</MudTh>
                <MudTh Style="width: 20%"></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                    <MudTd>@context.City</MudTd>
                    <MudTd>
                        @if (isManager)
                    {
                        <MudButton Icon="@Icons.Filled.Delete" Color="Color.Error" Disabled="@IsScheduleGenerated" OnClick="@(() => RemoveTeam(context))">Видалити з турніру</MudButton>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private TournamentViewModel tournament;
    private List<ClubViewModel> clubs = new();
    private bool isManager;

    [Parameter]
    public TournamentViewModel Tournament { get; set; }


    public bool IsScheduleGenerated => Tournament.Matches.Any();

    protected override async Task OnParametersSetAsync()
    {
        await LoadClubs();
    }

    protected override async Task OnInitializedAsync()
    {
        isManager = await AccountManager.IsUserInRole("Manager");
        await LoadClubs();
    }

    private async Task LoadClubs()
    {
        if (Tournament != null)
        {
            clubs = await TeamService.GetTournamentTeams(Tournament.Id);
        }
    }

    private async Task AddTeam()
    {
        var availableTeams = TeamService.Teams
            .Where(x => !clubs.Select(x => x.Team.Id).Contains(x.Team.Id))
            .Select(x => x.Team)
            .Where(x => x.VerificationState == VerificationState.Verified)
            .ToList();
        var parameters = new DialogParameters<SelectTeamsDialog>();
        parameters.Add(x => x.AvailableTeams, availableTeams);

        var dialog = DialogService.Show<SelectTeamsDialog>(
            "Add team",
            parameters,
            new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true });
        var result = (await dialog.Result).Data as IEnumerable<Guid?>;

        if (result is not null)
        {
            foreach (var teamId in result)
            {
                if (teamId.HasValue)
                {
                    var newTournamentTeam = await TournamentTeamService.Post(new TournamentTeamModel()
                        {
                            TournamentId = Tournament.Id,
                            TeamId = teamId.Value
                        });
                }

                clubs.Add(TeamService.Teams.First(x => x.Team.Id == teamId));
            }
        }
    }

    private async Task RemoveTeam(ClubViewModel club)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Підтвердити видалення",
            $"Are you sure you want to remove team from tournament: {club.Name}?",
            yesText: "Так", cancelText: "Ні"
        );

        if (confirmed == true)
        {
            await TournamentTeamService.Delete(Tournament.TournamentTeams.First(x => x.TeamId == club.Team.Id).Id);
            clubs.Remove(club);
        }
    }
}
