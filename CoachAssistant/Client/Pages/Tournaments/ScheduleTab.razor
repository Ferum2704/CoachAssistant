@inject TournamentService TournamentService
@inject TeamService TeamService
@inject NavigationManager NavigationManager

<MudContainer Class="py-4">
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Match Schedule</MudText>

    @if (matches == null || matches.Count == 0)
    {
        <MudGrid Justify="Justify.Center" Class="mt-3">
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@GenerateSchedule" Size="Size.Large">Generate Schedule</MudButton>
        </MudGrid>
    }
    else
    {
        foreach (var match in matches)
        {
            <MudGrid Justify="Justify.Center">
                <MudItem xs="10" sm="10" md="10" lg="10">
                    <MudPaper Class="m-2 p-4 d-flex flex-column align-center justify-center" Elevation="8" Style="cursor: pointer; transition: box-shadow 0.3s; border-radius: 12px; background-color:lightgray;" @onclick="@(() => NavigateToMatchDetails(match.Id))">
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                            @match.StartTime.ToString("MMMM dd, yyyy | hh:mm tt") | @match.Location
                        </MudText>
                        <MudText Typo="Typo.h6" Class="mt-2" Style="font-weight: 600;">
                            @string.Join(" VS ", match.MatchTeams.Select(mt => mt.Team.Name))
                        </MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    }
</MudContainer>

@code {
    private IReadOnlyCollection<MatchViewModel> matches = new List<MatchViewModel>();
    private List<ClubViewModel> teams = new();

    [Parameter]
    public TournamentViewModel Tournament { get; set; }

    protected override void OnInitialized()
    {
        if (Tournament is not null)
        {
            matches = Tournament.Matches;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadTeams();

        if (matches.Count > 0)
        {
            AssignTeamsToMatches();
        }
    }

    private async Task GenerateSchedule()
    {
        var tournament = await TournamentService.GenerateSchedule(Tournament.Id.ToString());

        matches = tournament.Matches;

        AssignTeamsToMatches();

        StateHasChanged();
    }

    private async Task LoadTeams()
    {
        if (Tournament != null)
        {
            teams = await TeamService.GetTournamentTeams(Tournament.Id);
        }
    }

    private void AssignTeamsToMatches()
    {
        foreach (var matchTeam in matches.SelectMany(x => x.MatchTeams))
        {
            matchTeam.Team = teams.FirstOrDefault(x => x.Team.Id == matchTeam.TeamId)?.Team;
        }
    }

    private void NavigateToMatchDetails(Guid matchId)
    {
        NavigationManager.NavigateTo($"/match/{matchId}");
    }
}
