@using CoachAssistant.Client.Entities
@page "/teamDetails"

@if (club is null)
{
    <MudPaper Class="d-flex flex-column align-center justify-center" MaxWidth="100vw" Height="100vh">
        <MudIcon Icon="@Icons.Material.Filled.Error" Style="font-size: 150px; color: red"/>
        <MudText Typo="Typo.h3">You don't have a team yet.</MudText>
        <MudButton Class="mt-4" Variant="Variant.Filled" Size="Size.Large" Color="Color.Primary" OnClick="OpenAddTeamDialog">
            Add team
        </MudButton>
    </MudPaper>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="d-flex justify-space-between">
                <MudText>@club.Name</MudText>
                <MudPaper Class="d-flex">
                    <MudButton>Edit</MudButton>
                    <MudButton>Delete</MudButton>
                </MudPaper>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">

        </MudItem>
    </MudGrid>
}

@inject IHttpClientService HttpClientService
@inject ICurrentTeamProvider CurrentTeamProvider
@inject IDialogService DialogService

@code {
    ClubViewEntity club;

    protected override async Task OnInitializedAsync()
    {
        var clubViewModel = await HttpClientService.GetAsync<ClubViewModel>(ApiUrls.CoachTeamUrl);

        if (clubViewModel is not null)
        {
            CurrentTeamProvider.Set(clubViewModel);

            club = CurrentTeamProvider.CurrentClub;
        }
    }

    private async Task OpenAddTeamDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters();

        var dialog = DialogService.Show<AddTeamDialog>("Add Team", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var newTeam = result.Data as TeamClubModel;
        }
    }
}
