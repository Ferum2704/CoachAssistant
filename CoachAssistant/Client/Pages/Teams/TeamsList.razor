@page "/teams"
@inject TeamService TeamService

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h4" GutterBottom="true" Align="Align.Center">Список команд</MudText>
    <MudTable Items="clubs" Striped="true">
        <HeaderContent>
            <MudTh Style="width: 20%">Назва</MudTh>
            <MudTh Style="width: 20%">Регіон</MudTh>
            <MudTh Style="width: 20%">Населений пункт</MudTh>
            <MudTh Style="width: 20%">Стадіон</MudTh>
            <MudTh Style="width: 10%">Стан верифікації</MudTh>
            <MudTh Style="width: 10%"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="font-weight: bold">@context.Name</MudTd>
            <MudTd>@context.Region</MudTd>
            <MudTd>@context.City</MudTd>
            <MudTd>@context.Stadium</MudTd>
            <MudTd>
                <MudChip Color="@GetStateColor(context.Team.VerificationState)" Text="@GetStateText(context.Team.VerificationState)" />
            </MudTd>
            <MudTd>
                <MudButton Color="Color.Error" OnClick="@(() => RejectTeam(context))" Disabled="@(context.Team.VerificationState != VerificationState.InProgress)">Reject team</MudButton>
                <MudButton Color="Color.Success" OnClick="@(() => AcceptTeam(context))" Disabled="@(context.Team.VerificationState != VerificationState.InProgress)">Accept team</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

    @code {
    private List<ClubViewModel> clubs = new();

    protected override void OnInitialized()
    {
        clubs = TeamService.Teams;
    }

    private Color GetStateColor(VerificationState state) => state switch
    {
        VerificationState.NotVerified => Color.Error,
        VerificationState.InProgress => Color.Warning,
        VerificationState.Verified => Color.Success,
        _ => Color.Default
    };

    private string GetStateText(VerificationState state) => state switch
    {
        VerificationState.NotVerified => "Не верифікована",
        VerificationState.InProgress => "В очікуванні",
        VerificationState.Verified => "Верифікована",
        _ => "Unknown"
    };

    private async Task AcceptTeam(ClubViewModel club)
    {
        await TeamService.AcceptVerification(club.Id);

        club.Team.VerificationState = VerificationState.Verified;
        StateHasChanged();
    }

    private async Task RejectTeam(ClubViewModel club)
    {
        await TeamService.RejectVerification(club.Id);

        club.Team.VerificationState = VerificationState.NotVerified;
        StateHasChanged();
    }
}
