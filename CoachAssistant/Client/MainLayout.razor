@using CoachAssistant.Client.Pages
@using CoachAssistant.Client.Pages.Tournaments
@inherits LayoutComponentBase

<MudLayout>
    @if (isAuthenticated)
    {
        <MudAppBar>
            <MudGrid Justify="Justify.Center">
                <MudItem xs="6" lg="9" Class="d-flex align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Style="color: white" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                    <MudText Typo="Typo.h6" Class="mr-2" Style="color: white">Team assistant</MudText>
                </MudItem>
                <MudItem xs="6" lg="3" Class="d-flex align-center">
                    @if (isAuthenticated)
                    {
                        <MudText Typo="Typo.h6" Class="mr-2" Style="color: white">Вітаємо, @userName!</MudText>
                        <MudButton Variant="Variant.Filled" OnClick="@Logout" Color="Color.Secondary">Вийти</MudButton>
                    }
                </MudItem>
            </MudGrid>
        </MudAppBar>
        <MudDrawer @bind-Open="@_drawerOpen">
            <NavMenu />
        </MudDrawer>
    }
    <MudMainContent Style="@(isAuthenticated ? "" : "padding: 0px;")">
        @Body
    </MudMainContent>
</MudLayout>

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAccountManager AccountManager;
@inject ILocalStorageService LocalStorage
@inject IHttpClientService HttpClientService
@inject IDialogService DialogService

@code {
    private bool isAuthenticated = false;
    private bool isManager = false;
    private string userName = "";

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity.IsAuthenticated;
        userName = authState.User.Identity.IsAuthenticated ? authState.User.Identity.Name : "Guest";

        isManager = await AccountManager.IsUserInRole("Manager");
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("AccessToken");
        await HttpClientService.PostAsync(ApiUrls.RevokeUrl, "revoke");

        AccountManager.MarkUserAsLoggedOut();
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }
}
